services:
  # Redis - Broker para Celery (SECURIZADO)
  redis:
    image: redis:7-alpine
    container_name: sentinel_redis
    ports:
      - "127.0.0.1:6379:6379"  # Solo localhost
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --protected-mode yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Persistencia
  persistence_service:
    build:
      context: .
      dockerfile: services/persistence_service/Dockerfile
    container_name: sentinel_persistence
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=sqlite:///./data/persistence.db
      - PERSISTENCE_HOST=0.0.0.0
      - PERSISTENCE_PORT=8001
    volumes:
      - ./data:/app/data
      - ./config:/app/config
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Servicio de Clasificación (FastAPI)
  classification_service:
    build:
      context: .
      dockerfile: services/classification_service/Dockerfile
    container_name: sentinel_classification
    ports:
      - "8002:8002"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PERSISTENCE_HOST=persistence_service
      - PERSISTENCE_PORT=8001
      - CLASSIFICATION_HOST=0.0.0.0
      - CLASSIFICATION_PORT=8002
    volumes:
      - ./config:/app/config
    restart: unless-stopped
    depends_on:
      persistence_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Workers de Celery para Clasificación
  classification_worker:
    build:
      context: .
      dockerfile: services/classification_service/Dockerfile
    command: python worker.py
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - PERSISTENCE_HOST=persistence_service
      - PERSISTENCE_PORT=8001
    volumes:
      - ./config:/app/config
    restart: unless-stopped
    depends_on:
      persistence_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      replicas: 2  # Escalar a 2 workers por defecto
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery_app", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Flower - Monitoreo de Celery (SECURIZADO)
  flower:
    build:
      context: .
      dockerfile: services/classification_service/Dockerfile
    container_name: sentinel_flower
    command: celery -A app.celery_app flower --port=5555 --broker=redis://:${REDIS_PASSWORD}@redis:6379/0 --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD} --url_prefix=flower
    ports:
      - "127.0.0.1:5555:5555"  # Solo localhost
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_DB=0
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - FLOWER_USER=${FLOWER_USER}
      - FLOWER_PASSWORD=${FLOWER_PASSWORD}
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5555/flower/"]
      interval: 30s
      timeout: 10s
      retries: 3

  # n8n - Workflow Automation (SECURIZADO)
  n8n:
    image: n8nio/n8n:latest
    container_name: sentinel_n8n
    ports:
      - "127.0.0.1:5678:5678"  # Solo localhost
    environment:
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - N8N_USER_MANAGEMENT_DISABLED=false
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_PASSWORD}
      - DB_SQLITE_POOL_SIZE=10
      - N8N_RUNNERS_ENABLED=true
      - WEBHOOK_URL=http://localhost:5678/
      - N8N_SECURE_COOKIE=true
      - N8N_SESSION_SECRET=${N8N_SESSION_SECRET}
    volumes:
      - n8n_data:/home/node/.n8n
    restart: unless-stopped
    depends_on:
      - classification_service
      - persistence_service
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5678/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  n8n_data:

networks:
  default:
    name: sentinel_network
    driver: bridge